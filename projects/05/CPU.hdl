// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Determine if A register's input comes from a C-instruction (ALU output)
    // or an A-instruction
    Mux16(a=instruction, b=outM2, sel=instruction[15], out=muxOut);

    // A register
    // load the A register in the following cases:
    // 1. It's a c-instruction and instr[5] is 1
    // 2. It's an a-instruction
    // represented by boolean function:
    // (instruction[15] and instruction[5]) or not instruction[15]
    And(a=instruction[5], b=instruction[15], out=and15-5);
    Not(in=instruction[15], out=not15);
    Or(a=and15-5, b=not15, out=loadA);
    Register(in=muxOut, load=loadA, out=AOut, out[0..14]=addressM);

    // D register
    DRegister(in=outM2, load=instruction[4], out=DOut);

    // ALU
    Mux16(a=AOut, b=inM, sel=instruction[12], out=muxAM);
    ALU(x=DOut, y=muxAM,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9],  ny=instruction[8],
        f=instruction[7],   no=instruction[6],
        zr=zr, ng=ng, out=outM, out=outM2);

    // writeM
    // write to memory if its a c-instruction and instruction[3] == 1
    And(a=instruction[3], b=instruction[15], out=writeM);

    // Jumps
    // Determine if output is positive (i.e ps=1 if both zr and ng are 0)
    Or(a=zr, b=ng, out=zrng);
    Not(in=zrng, out=ps);

    // Compare j bits to ALU status bits
    // If a single comparison evaluates to 1, set program counter to ALU output
    // else increment pc
    And(a=instruction[0], b=ps, out=isps);
    And(a=instruction[1], b=zr, out=iszr);
    And(a=instruction[2], b=ng, out=isng);
    Or(a=isps, b=iszr, out=ispsOrzr);
    Or(a=ispsOrzr, b=isng, out=pszrng);
    // load only if its a c-instruction
    And(a=pszrng, b=instruction[15], out=pcload);

    // Program Counter
    Not(in=pcload, out=shouldInc); // If not loading new value, increment
    PC(in=AOut, load=pcload, inc=shouldInc, reset=reset, out[0..14]=pc);
}
